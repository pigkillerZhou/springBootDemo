buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'

        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.9"
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

configurations {
    jsondoclet
}

group 'com.xtubetv'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile('org.springframework.boot:spring-boot-starter-aop')

    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.10.Final'
    compile "com.querydsl:querydsl-jpa:4.1.3"

    compile "org.bouncycastle:bcpkix-jdk15on:1.52"
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'org.json', name: 'json', version: '20170516'
    compile group: 'org.glassfish', name: 'javax.el', version: '3.0.1-b08'



    optional "org.springframework.boot:spring-boot-configuration-processor"

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:1.2.1.RELEASE'
    jsondoclet group: 'capital.scalable', name: 'spring-auto-restdocs-json-doclet', version: '1.0.8'

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.2.1.RELEASE'
    testCompile group: 'capital.scalable', name: 'spring-auto-restdocs-core', version: '1.0.8'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
}


sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/apt"
        }
    }
    test {
        java.srcDirs = [
                "src/test/integration-test/java",
                "src/test/unit-test/java"
        ]
        resources.srcDirs = [
                "src/test/integration-test/resources",
                "src/test/unit-test/resources"
        ]
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        testOutputDir = file("$buildDir/classes/test/")
    }
}


querydsl {
    jpa = true
    querydslSourcesDir = "$buildDir/generated-sources/apt"
}

project.afterEvaluate {

    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", project.querydsl.processors() +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}


task buildDocker(type: Docker, dependsOn: build) {
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into "build/docker/target"
        }
    }
}

ext['spring-restdocs.version'] = '1.2.1.RELEASE'

ext {
    snippetsDir = file('build/generated-snippets')
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

compileJava {
    dependsOn(processResources)
    options.compilerArgs << "-Xlint:unchecked"
}

task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    outputs.dir snippetsDir

    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    dependsOn jsonDoclet
}

asciidoctor {
    inputs.dir snippetsDir
    sourceDir = file('src/docs/asciidoc')

    outputDir = file("$buildDir/generated-docs")
    options backend: 'html', doctype: 'book'
    attributes 'source-highlighter': 'highlightjs', 'snippets': snippetsDir

    dependsOn test
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}